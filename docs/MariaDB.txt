MITRU DB
	sudo mysql -u root -p
	CREATE DATABASE mitru;
	CREATE USER 'wa7dem'@'localhost' IDENTIFIED BY 'password';
	GRANT ALL PRIVILEGES ON mitru.* TO 'wa7dem'@'localhost';
	FLUSH PRIVILEGES;
	EXIT;
	
Get a list of users
SELECT User FROM mysql.user;

Get priviledges for a user
SHOW GRANTS FOR 'wa7dem'@localhost;

CREATE USER 'wa7dem'@'10.0.%,%' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON *.* TO 'wa7dem'@'10.0.%.%' IDENTIFIED BY 'password' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON mitru.* TO 'wa7dem'@'10.0.%.%';
Show databases
SHOW DATABASES;

Change database
USE database;


CREATE TABLE IF NOT EXISTS vehicles (
	id INT NOT NULL AUTO_INCREMENT,
	name VARCHAR(64) NOT NULL,
	vid VARCHAR(16) NOT NULL,
	status VARCHAR(16)
	base VARCHAR(24),
	base_loc POINT,
	info_enable BOOLEAN DEFAULT 0,
	alert_enable BOOLEAN DEFAULT 1,
	alarm_enable BOOLEAN DEFAULT 1,
	PRIMARY KEY ( id )
);

INSERT INTO vehicles (name, vid, status, base, base_location)
VALUES ('White', 'WA7DEM-1', 'Ready', 'SnoCo DEM', GeomFromText('POINT(-121.971 47.8554)', 4326)),
	('GREY', 'WA7DEM-2', 'Deployable', 'SnoCo DEM', GeomFromText('POINT(-121.971 47.8554)', 4326)),
	('BLACK', 'WA7DEM-3', 'Deployable', 'SnoCo DEM', GeomFromText('POINT(-121.971 47.8554)', 4326));
	
CREATE TABLE IF NOT EXISTS channels (
	id INT NOT NULL AUTO_INCREMENT,
	v_id INT NOT NULL,
	chan_name VARCHAR(16) NOT NULL,
	chan_units VARCHAR(16),
	PRIMARY KEY ( id )
);

ALTER TABLE channels ADD CONSTRAINT channel_id UNIQUE (v_id,chan_name);
ALTER TABLE channels ADD CONSTRAINT fk_vid FOREIGN KEY (v_id) REFERENCES vehicles(id);

INSERT INTO channels (v_id, chan_name, chan_units)
VALUES
	(1, 'Ch 1', 'Volts'),
	(1, 'Ch 2', 'Deg.F'),
	(2, 'Ch 1', 'Volts'),
	(2, 'Ch 2', 'Deg.F'),	
	(3, 'Ch 1', 'Volts'),
	(3, 'Ch 2', 'Deg.F');


CREATE TABLE IF NOT EXISTS locations (
	id INT NOT NULL AUTO_INCREMENT,
	v_id INT NOT NULL,
	last_reading DATETIME NOT NULL,
	latitude DOUBLE PRECISION,
	longitude DOUBLE PRECISION,
	locator VARCHAR(12),
	altitude_m DOUBLE PRECISION,
	loc POINT,
	PRIMARY KEY ( id )
);

set @var=if((SELECT true FROM information_schema.TABLE_CONSTRAINTS WHERE
            CONSTRAINT_SCHEMA = DATABASE() AND
            TABLE_NAME        = 'channels' AND
            CONSTRAINT_NAME   = 'fk_location_vid' AND
            CONSTRAINT_TYPE   = 'FOREIGN KEY') = true,'ALTER TABLE table_name
            drop foreign key fk_location_vid','select 1');
			
ALTER TABLE locations ADD CONSTRAINT fk_location_vid FOREIGN KEY (v_id) REFERENCES vehicles(id);

CREATE TABLE IF NOT EXISTS readings (
	id INT NOT NULL AUTO_INCREMENT,
	v_id INT NOT NULL,
	c_id INT NOT NULL,
	last_reading DATETIME NOT NULL,
	latitude DOUBLE PRECISION,
	longitude DOUBLE PRECISION,
	altitude_m DOUBLE PRECISION,
	chan_value DOUBLE PRECISION,
	chan_units VARCHAR(12),
	PRIMARY KEY ( id )
);

ALTER TABLE readings ADD CONSTRAINT fk_readings_vid FOREIGN KEY (v_id) REFERENCES vehicles(id);
ALTER TABLE readings ADD CONSTRAINT fk_readings_chanid FOREIGN KEY (c_id) REFERENCES channels(id);	

CREATE TABLE IF NOT EXISTS last_contact (
	id INT NOT NULL AUTO_INCREMENT,
	v_id INT NOT NULL,
	lt_minutes BIGINT,
	PRIMARY KEY (id)
	);
ALTER TABLE last_contact ADD CONSTRAINT fk_last_contact_vid FOREIGN KEY (v_id) REFERENCES vehicles(id);	

INSERT INTO last_contact (v_id, lt_minutes)
VALUES (1,0),(2,0),(3,0);

CREATE TABLE IF NOT EXISTS carrier_sms (
	id INT NOT NULL AUTO_INCREMENT,
	carrier_name VARCHAR(24) NOT NULL,
	sms VARCHAR(32),
	mms VARCHAR(32),
	mms_support BOOLEAN NOT NULL,
	PRIMARY KEY (id)
	);
	
INSERT INTO carrier_sms (carrier_name, sms, mms, mms_support)
VALUES
	('AT&T',          'txt.att.net', 'mms.att.net', TRUE),
	('Boost Mobile',  'sms.myboostmobile.com', 'myboostmobile.com', TRUE),
	('C-Spire',       'cspire1.com',   NULL,        FALSE),
	('Cricket',       'sms.mycricket.com', 'mms.mycricket.com', TRUE),
	('Consumer Cellular', 'mailmymobile.net', NULL, FALSE),
	('Google Project Fi', 'msg.fi.google.com', 'mms_support', TRUE),
	('Metro PCS',     'mymetropcs.com', 'mymetropcs.com', TRUE),
	('Mint Mobile', 'mailmymobile.net', NULL,  FALSE),
	('Page Plus', 'vtext.com', 'mypixmessages.com', TRUE),
	('Republic Wireless', 'text.republicwireless.com', NULL, FALSE),
    ('Sprint',        'pm.sprint.com', 'pm.sprint.com', TRUE),
    ('Straight Talk', 'vtext.com', 'mypixmessages.com', TRUE),
	('T-Mobile',      'tmomail.net', 'tmomail.net', TRUE),
    ('Ting', 'message.ting.com', NULL, FALSE),
    ('Tracfone', 	'mmst5.tracfone.com', 'mmst5.tracfone.com', TRUE),
    ('U.S. Cellular', 'email.uscc.net', 'mms.uscc.net', TRUE),	
    ('Verizon',       'vtext.com', 'vzwpix.com', TRUE),
    ('Virgin Mobile', 'vmobl.com', 'vmpix.com', TRUE),
	('Xfinity Mobile', 'vtext.com', 'mypixmessages.com', TRUE);

	


CREATE TABLE IF NOT EXISTS messages (
	id INT NOT NULL AUTO_INCREMENT,
	name VARCHAR(16) NOT NULL,
	message VARCHAR(128),
	PRIMARY KEY (id)
);

-- message formats:
-- Temp High: {vehicle name} Temp High {Alarm/Alert}: Temperature exceeds {limit_value} degrees ({temp reading})
-- Temp Low: {vehicle name} Temp Low {Alarm/Alert}: Temperature below {limit_value} degrees ({temp reading})
-- Voltage Low: {vehicle name} Voltage Low {Alarm/Alert}: Voltage below {limit_value} volts ({volt reading})
-- No Contact: {vehicle name} No Contact {Alarm/Alert}: No updates in last {limit_value} minutes ({time in minutes})
INSERT INTO messages (name, message)
VALUES
	('Temp High', '{0} Temp High {1}: Temperature exceeds {2} degrees ({3})'),
	('Temp Low', '{0} Temp Low {1}: Temperature below {2} degrees ({3})'),	
	('Voltage Low', '{0} Voltage Low {1}: Voltage below {2} degrees ({3})'),
	('No Contact', '{0} No Contact {1}: No updates in last {2} minutes ({3})'),
	('Test Message', '{0} Test Message {1}: This is a test message.');

-- enabled -> True rule is being procesed, False rule is not being processed
-- rules table
-- rule_name is the name of the rule
-- rule function is the function name to call
-- limit value is the limit threshhold
-- secerity : INFO, ALERT, ALARM 	
CREATE TABLE IF NOT EXISTS rules (
	id INT NOT NULL AUTO_INCREMENT,
	v_id INT NOT NULL,
	enabled BOOLEAN DEFAULT FALSE,
	rule_name VARCHAR(16) NOT NULL,
	rule_class VARCHAR(16) NOT NULL,
	rule_function VARCHAR(16) NOT NULL,
	limit_value DOUBLE,
	severity VARCHAR(16) NOT NULL,	
	message INT NOT NULL,
	PRIMARY KEY (id)
);

ALTER TABLE rules ADD CONSTRAINT fk_rules_vid FOREIGN KEY (v_id) REFERENCES vehicles(id);
ALTER TABLE rules ADD CONSTRAINT fk_rules_message FOREIGN KEY (message) REFERENCES messages(id);

INSERT INTO rules(v_id, enabled, rule_name, rule_class, rule_function, limit_value, severity, message)
VALUES
(1, TRUE, 'White Temp', 'temp_check', 'GT', 95.0, 'ALERT', 1),
(2, TRUE, 'Grey temp',  'temp_check', 'GT', 95.0, 'ALERT',  1),
(3, TRUE, 'Black temp', 'temp_check', 'GT', 95.0, 'ALERT',  1),
(1, TRUE, 'White temp', 'temp_check', 'GT', 100.0, 'ALARM',  1),
(2, TRUE, 'Grey temp',  'temp_check', 'GT', 100.0, 'ALARM',  1),
(3, TRUE, 'Black temp', 'temp_check', 'GT', 100.0, 'ALARM',  1),
(1, TRUE, 'White Temp', 'temp_check', 'LE', 32.0, 'ALARM',  2),
(2, TRUE, 'Grey temp',  'temp_check', 'LE', 32.0, 'ALARM',  2),
(3, TRUE, 'Black temp', 'temp_check', 'LE', 32.0, 'ALARM',  2),
(1, TRUE, 'White battery', 'volt_check', 'LE', 11.9, 'ALERT', 3),
(2, TRUE, 'Grey battery',  'volt_check', 'LE', 11.9, 'ALERT', 3),
(3, TRUE, 'Black battery', 'volt_check', 'LE', 11.9, 'ALERT', 3),
(1, TRUE, 'White battery', 'volt_check', 'LE', 11.0, 'ALARM', 3),
(2, TRUE, 'Grey battery',  'volt_check', 'LE', 11.0, 'ALARM', 3),
(3, TRUE, 'Black battery', 'volt_check', 'LE', 11.0, 'ALARM', 3),
(1, TRUE, 'White no contact', 'no_contact', 'time_check', 240.0, 'ALERT', 4),
(2, TRUE, 'Grey no contact',  'no_contact', 'time_check', 240.0, 'ALERT', 4),
(3, TRUE, 'Black no contact', 'no_contact', 'time_check', 240.0, 'ALERT', 4),
(1, TRUE, 'White no contact', 'no_contact', 'time_check', 480.0, 'ALARM', 4),
(2, TRUE, 'Grey no contact',  'no_contact', 'time_check', 480.0, 'ALARM', 4),
(3, TRUE, 'Black no contact', 'no_contact', 'time_check', 480.0, 'ALARM', 4);


Test Queries
SELECT v_id, rule_name, rule_function, limit_value, severity, message FROM rules WHERE  severity = 'ALERT' AND enabled = TRUE ORDER BY v_id;

SELECT a.id, a.v_id, a.rule_name, a.rule_function, a.limit_value, a.severity, b.message
FROM rules a
INNER JOIN messages b
ON a.message = b.id
WHERE a.v_id = 1 AND severity = 'ALARM' AND ENABLED = TRUE 
ORDER BY v_id;


CREATE TABLE IF NOT EXISTS contacts (
	id INT NOT NULL AUTO_INCREMENT,
	name VARCHAR(64) NOT NULL,
	phone VARCHAR(12) NOT NULL,
	carrier_id INT NOT NULL,
	level INTEGER DEFAULT 0,	-- 0 = None, 1 = Alarms only, 2= Alarms and Alerts, 3=All (Alarms, Alerts and Info)
	vehicles INTEGER DEFAULT 0, -- 0 = None, 1 = White, 2= Grey, 3 = White + Gray, 4=Black, 5= White + Black, 6= Grey + Black, 7=All
	PRIMARY KEY (id)
	);
	
ALTER TABLE contacts ADD CONSTRAINT fkey_contact_carrier FOREIGN KEY (carrier_id) REFERENCES carrier_sms(id);

INSERT INTO contacts(name, phone, carrier_id, level, vehicles)
VALUES
	('Dennis Harding', '2069996750', 1, 2, 7),
	('Scott Honaker', '4253305439', 17, 2,7);
	


-- status_queue
-- The message queue contains all alerts and alarms . Essently the status queue is a 
-- Log of all alerts and alarms.
-- Alert and Alarm states: Alerts and Alarms can have the following states: enabled and disabled
-- Alert and Alarm sub states: When Alerts or Alarm are enabled, they can have the following substates:
--  New, Sent, Acknowledged and Cleared. 
-- When the rules engine detects an Alert or Alarm rule violation, a new status entry is prepared. To prevent sending 
-- multiple mesages, the status queue is check for an existing outstanding message.If no entry is found, then the new entry
-- is added to the status queue, and sent is set to FALSE. Once the message is sent, sent to true and a time started. 
-- If the condition does not clear (self heals) or is not acknowleged in 8 hours, another alert/alarm will be sent.

CREATE TABLE IF NOT EXISTS status_queue (
	id BIGINT NOT NULL AUTO_INCREMENT,
	rule_id INT NOT NULL,
	post_time DATETIME NOT NULL,
	sent BOOLEAN DEFAULT FALSE,
	sent_time DATETIME,
	acknowledged BOOLEAN DEFAULT FALSE,
	acknowledge_time DATETIME,
	cleared BOOLEAN DEFAULT FALSE,
	clear_time DATETIME,
	cleared_sent BOOLEAN DEFAULT FALSE,
	v_id INT NOT NULL,
	count INT DEFAULT 0,
	severity VARCHAR(16),
	message VARCHAR(256) NOT NULL,
	PRIMARY KEY (id)
);

ALTER TABLE status_queue ADD CONSTRAINT fk_status_vid FOREIGN KEY (v_id) REFERENCES vehicles(id);
ALTER TABLE status_queue ADD CONSTRAINT fk_status_rule FOREIGN KEY (rule_id) REFERENCES rules(id);

Test
INSERT INTO status_queue(rule_id, post_time, v_id, severity, message)
VALUES
(9999, '2023-06-12 12:00:00', 3, 'ALERT', 'This is a test message');


SELECT * FROM status_queue WHERE v_id = 2 AND severity = 'ALERT' AND cleared = FALSE;

# select the last locatation reading for a vehicle

SELECT * FROM locations a
INNER JOIN
(SELECT MAX(l.last_reading)as max_reading, l.v_id FROM locations l 
	WHERE l.v_id = %s GROUP BY v_id) as t
ON t.v_id = a.v_id AND
	t.max_reading = a.last_reading;
	
	
SELECT * FROM readings a
INNER JOIN
(SELECT MAX(l.last_reading)as max_reading, l.v_id FROM locations l 
	WHERE l.v_id = 1 GROUP BY v_id) as t
ON t.v_id = a.v_id AND
	t.max_reading = a.last_reading;
	
# get the last  location readings
SELECT * FROM locations WHERE v_id = 1
ORDER BY id DESC LIMIT 5;

# get the last 5 reading sets for voltage and temp

SELECT t1.v_id, t1.last_reading, t1.battery, t2.temp_f FROM
(SELECT v_id, last_reading, chan_value as battery FROM readings 
WHERE c_id = 1 AND v_id = (SELECT id FROM vehicles WHERE vid = 'WA7DEM-1')) as t1
INNER JOIN 
(SELECT v_id, last_reading, chan_value as temp_f FROM readings 
WHERE c_id = 2 AND v_id = (SELECT id FROM vehicles WHERE vid = 'WA7DEM-1')) as t2
ON t1.v_id = t2.v_id AND
	t1.last_reading = t2.last_reading
ORDER BY t1.last_reading DESC
LIMIT 5;

SELECT t1.v_id, t1.last_reading, t1.battery, t2.temp_f FROM
(SELECT v_id, last_reading, chan_value as battery FROM readings 
WHERE c_id = 1 ) as t1
INNER JOIN 
(SELECT v_id, last_reading, chan_value as temp_f FROM readings 
WHERE c_id = 2 ) as t2
ON t1.v_id = t2.v_id AND
	t1.last_reading = t2.last_reading
ORDER BY t1.v_id, t1.last_reading DESC
LIMIT 5;


